package com.hartwig.actin.personalization.ncr.serialization

import java.io.File
import java.nio.file.Files

object NCRDataReader {

    private const val FIELD_DELIMITER = ";"

    fun read(tsv: String): List<NCRRecord> {
        val lines = Files.readAllLines(File(tsv).toPath())
        val fields = createFields(lines[0].split(FIELD_DELIMITER).toTypedArray())

        return lines.subList(1, lines.size).map { createRecord(fields, it.split(FIELD_DELIMITER).toTypedArray()) }
    }

    private fun createRecord(fields: Map<String, Int>, parts: Array<String>): NCRRecord {
        val extractor = NCRFieldExtractor(fields, parts)

        // Assumption: A patient either has all CCI values or none.
        val cci = if (extractor.hasValue("cci")) NCRCharlsonComorbitidy(
            cci = extractor.mandatoryInt("cci"),
            cciAids = extractor.mandatoryInt("cci_aids"),
            cciCat = extractor.mandatoryInt("cci_cat"),
            cciChf = extractor.mandatoryInt("cci_chf"),
            cciCollagenosis = extractor.mandatoryInt("cci_collagenosis"),
            cciCopd = extractor.mandatoryInt("cci_copd"),
            cciCvd = extractor.mandatoryInt("cci_cvd"),
            cciDementia = extractor.mandatoryInt("cci_dementia"),
            cciDm = extractor.mandatoryInt("cci_dm"),
            cciEodDm = extractor.mandatoryInt("cci_eod_dm"),
            cciMalignancy = extractor.mandatoryInt("cci_malignancy"),
            cciMetastatic = extractor.mandatoryInt("cci_metastatic"),
            cciMi = extractor.mandatoryInt("cci_mi"),
            cciMildLiver = extractor.mandatoryInt("cci_mild_liver"),
            cciPlegia = extractor.mandatoryInt("cci_plegia"),
            cciPvd = extractor.mandatoryInt("cci_pvd"),
            cciRenal = extractor.mandatoryInt("cci_renal"),
            cciSevereLiver = extractor.mandatoryInt("cci_severe_liver"),
            cciUlcer = extractor.mandatoryInt("cci_ulcer")
        ) else null

        val mal = NCRPreviousMalignancy(
            mal1Int = extractor.optionalInt("mal1_int"),
            mal2Int = extractor.optionalInt("mal2_int"),
            mal3Int = extractor.optionalInt("mal3_int"),
            mal4Int = extractor.optionalInt("mal4_int"),
            mal1TopoSublok = extractor.optionalString("mal1_topo_sublok"),
            mal2TopoSublok = extractor.optionalString("mal2_topo_sublok"),
            mal3TopoSublok = extractor.optionalString("mal3_topo_sublok"),
            mal4TopoSublok = extractor.optionalString("mal4_topo_sublok"),
            mal1Morf = extractor.optionalInt("mal1_morf"),
            mal2Morf = extractor.optionalInt("mal2_morf"),
            mal3Morf = extractor.optionalInt("mal3_morf"),
            mal4Morf = extractor.optionalInt("mal4_morf"),
            mal1Tumsoort = extractor.optionalInt("mal1_tumsoort"),
            mal2Tumsoort = extractor.optionalInt("mal2_tumsoort"),
            mal3Tumsoort = extractor.optionalInt("mal3_tumsoort"),
            mal4Tumsoort = extractor.optionalInt("mal4_tumsoort"),
            mal1Stadium = extractor.optionalString("mal1_stadium"),
            mal2Stadium = extractor.optionalString("mal2_stadium"),
            mal3Stadium = extractor.optionalString("mal3_stadium"),
            mal4Stadium = extractor.optionalString("mal4_stadium"),
            mal1Syst = extractor.optionalInt("mal1_syst"),
            mal2Syst = extractor.optionalInt("mal2_syst"),
            mal3Syst = extractor.optionalInt("mal3_syst"),
            mal4Syst = extractor.optionalInt("mal4_syst"),
            mal1SystCode1 = extractor.optionalString("mal1_syst_code1"),
            mal2SystCode1 = extractor.optionalString("mal2_syst_code1"),
            mal3SystCode1 = extractor.optionalString("mal3_syst_code1"),
            mal1SystCode2 = extractor.optionalString("mal1_syst_code2"),
            mal2SystCode2 = extractor.optionalString("mal2_syst_code2"),
            mal3SystCode2 = extractor.optionalString("mal3_syst_code2"),
            mal1SystCode3 = extractor.optionalString("mal1_syst_code3"),
            mal2SystCode3 = extractor.optionalString("mal2_syst_code3"),
            mal3SystCode3 = extractor.optionalString("mal3_syst_code3"),
            mal1SystCode4 = extractor.optionalString("mal1_syst_code4"),
            mal2SystCode4 = extractor.optionalString("mal2_syst_code4"),
            mal3SystCode4 = extractor.optionalString("mal3_syst_code4"),
            mal1SystCode5 = extractor.optionalString("mal1_syst_code5"),
            mal2SystCode5 = extractor.optionalString("mal2_syst_code5"),
            mal1SystCode6 = extractor.optionalString("mal1_syst_code6"),
            mal1SystCode7 = extractor.optionalString("mal1_syst_code7"),
            mal1SystCode8 = extractor.optionalString("mal1_syst_code8"),
            mal1SystCode9 = extractor.optionalString("mal1_syst_code9"),
        )

        val meta = NCRMetastases(
            metaTopoSublok1 = extractor.optionalString("meta_topo_sublok1"),
            metaTopoSublok2 = extractor.optionalString("meta_topo_sublok2"),
            metaTopoSublok3 = extractor.optionalString("meta_topo_sublok3"),
            metaTopoSublok4 = extractor.optionalString("meta_topo_sublok4"),
            metaTopoSublok5 = extractor.optionalString("meta_topo_sublok5"),
            metaTopoSublok6 = extractor.optionalString("meta_topo_sublok6"),
            metaTopoSublok7 = extractor.optionalString("meta_topo_sublok7"),
            metaTopoSublok8 = extractor.optionalString("meta_topo_sublok8"),
            metaTopoSublok9 = extractor.optionalString("meta_topo_sublok9"),
            metaTopoSublok10 = extractor.optionalString("meta_topo_sublok10"),
            metaInt1 = extractor.optionalInt("meta_int1"),
            metaInt2 = extractor.optionalInt("meta_int2"),
            metaInt3 = extractor.optionalInt("meta_int3"),
            metaInt4 = extractor.optionalInt("meta_int4"),
            metaInt5 = extractor.optionalInt("meta_int5"),
            metaInt6 = extractor.optionalInt("meta_int6"),
            metaInt7 = extractor.optionalInt("meta_int7"),
            metaInt8 = extractor.optionalInt("meta_int8"),
            metaInt9 = extractor.optionalInt("meta_int9"),
            metaInt10 = extractor.optionalInt("meta_int10"),
            metaProg1 = extractor.optionalInt("meta_prog1"),
            metaProg2 = extractor.optionalInt("meta_prog2"),
            metaProg3 = extractor.optionalInt("meta_prog3"),
            metaProg4 = extractor.optionalInt("meta_prog4"),
            metaProg5 = extractor.optionalInt("meta_prog5"),
            metaProg6 = extractor.optionalInt("meta_prog6"),
            metaProg7 = extractor.optionalInt("meta_prog7"),
            metaProg8 = extractor.optionalInt("meta_prog8"),
            metaProg9 = extractor.optionalInt("meta_prog9"),
            metaProg10 = extractor.optionalInt("meta_prog10"),
            metaLeverAantal = extractor.optionalInt("meta_lever_aantal"),
            metaLeverAfm = extractor.optionalInt("meta_lever_afm")
        )

        val lab = NCRLabValues(
            prechirCea = extractor.optionalDouble("prechir_cea"),
            postchirCea = extractor.optionalDouble("postchir_cea"),
            ldh1 = extractor.optionalInt("ldh1"),
            ldh2 = extractor.optionalInt("ldh2"),
            ldh3 = extractor.optionalInt("ldh3"),
            ldh4 = extractor.optionalInt("ldh4"),
            ldhInt1 = extractor.optionalInt("ldh_int1"),
            ldhInt2 = extractor.optionalInt("ldh_int2"),
            ldhInt3 = extractor.optionalInt("ldh_int3"),
            ldhInt4 = extractor.optionalInt("ldh_int4"),
            af1 = extractor.optionalInt("af1"),
            af2 = extractor.optionalInt("af2"),
            af3 = extractor.optionalInt("af3"),
            af4 = extractor.optionalInt("af4"),
            afInt1 = extractor.optionalInt("af_int1"),
            afInt2 = extractor.optionalInt("af_int2"),
            afInt3 = extractor.optionalInt("af_int3"),
            afInt4 = extractor.optionalInt("af_int4"),
            neutro1 = extractor.optionalDouble("neutro1"),
            neutro2 = extractor.optionalDouble("neutro2"),
            neutro3 = extractor.optionalDouble("neutro3"),
            neutro4 = extractor.optionalDouble("neutro4"),
            neutroInt1 = extractor.optionalInt("neutro_int1"),
            neutroInt2 = extractor.optionalInt("neutro_int2"),
            neutroInt3 = extractor.optionalInt("neutro_int3"),
            neutroInt4 = extractor.optionalInt("neutro_int4"),
            albumine1 = extractor.optionalDouble("albumine1"),
            albumine2 = extractor.optionalDouble("albumine2"),
            albumine3 = extractor.optionalDouble("albumine3"),
            albumine4 = extractor.optionalInt("albumine4"),
            albumineInt1 = extractor.optionalInt("albumine_int1"),
            albumineInt2 = extractor.optionalInt("albumine_int2"),
            albumineInt3 = extractor.optionalInt("albumine_int3"),
            albumineInt4 = extractor.optionalInt("albumine_int4"),
            leuko1 = extractor.optionalDouble("leuko1"),
            leuko2 = extractor.optionalDouble("leuko2"),
            leuko3 = extractor.optionalDouble("leuko3"),
            leuko4 = extractor.optionalDouble("leuko4"),
            leukoInt1 = extractor.optionalInt("leuko_int1"),
            leukoInt2 = extractor.optionalInt("leuko_int2"),
            leukoInt3 = extractor.optionalInt("leuko_int3"),
            leukoInt4 = extractor.optionalInt("leuko_int4")
        )

        val chir = NCRPrimarySurgery(
            chir = parts[fields["chir"]!!].toInt(),
            chirInt1 = parts[fields["chir_int1"]!!].toInt(),
            chirInt2 = parts[fields["chir_int2"]!!].toInt(),
            chirOpnameduur1 = parts[fields["chir_opnameduur1"]!!].toInt(),
            chirOpnameduur2 = parts[fields["chir_opnameduur2"]!!].toInt(),
            chirType1 = parts[fields["chir_type1"]!!].toInt(),
            chirType2 = parts[fields["chir_type2"]!!].toInt(),
            chirTech1 = parts[fields["chir_tech1"]!!].toInt(),
            chirTech2 = parts[fields["chir_tech2"]!!].toInt(),
            chirUrg1 = parts[fields["chir_urg1"]!!].toInt(),
            chirUrg2 = parts[fields["chir_urg2"]!!].toInt(),
            chirRad1 = parts[fields["chir_rad1"]!!].toInt(),
            chirRad2 = parts[fields["chir_rad2"]!!].toInt(),
            chirCrm1 = parts[fields["chir_crm1"]!!].toInt(),
            chirCrm2 = parts[fields["chir_crm2"]!!].toInt(),
            chirNaadlek1 = parts[fields["chir_naadlek1"]!!].toInt(),
            chirNaadlek2 = parts[fields["chir_naadlek2"]!!].toInt()
        )

        val rt = NCRPrimaryRadiotherapy(
            rt = parts[fields["rt"]!!].toInt(),
            rtType1 = parts[fields["rt_type1"]!!].toInt(),
            rtType2 = parts[fields["rt_type2"]!!].toInt(),
            rtStartInt1 = parts[fields["rt_start_int1"]!!].toInt(),
            rtStartInt2 = parts[fields["rt_start_int2"]!!].toInt(),
            rtStopInt1 = parts[fields["rt_stop_int1"]!!].toInt(),
            rtStopInt2 = parts[fields["rt_stop_int2"]!!].toInt(),
            rtDosis1 = parts[fields["rt_dosis1"]!!].toDouble(),
            rtDosis2 = parts[fields["rt_dosis2"]!!].toDouble()
        )

        val syst = NCRSystemicTreatment(
            chemo = parts[fields["chemo"]!!].toInt(),
            target = parts[fields["target"]!!].toInt(),
            systCode1 = parts[fields["syst_code1"]!!],
            systCode2 = parts[fields["syst_code2"]!!],
            systCode3 = parts[fields["syst_code3"]!!],
            systCode4 = parts[fields["syst_code4"]!!],
            systCode5 = parts[fields["syst_code5"]!!],
            systCode6 = parts[fields["syst_code6"]!!],
            systCode7 = parts[fields["syst_code7"]!!],
            systCode8 = parts[fields["syst_code8"]!!],
            systCode9 = parts[fields["syst_code9"]!!],
            systCode10 = parts[fields["syst_code10"]!!],
            systCode11 = parts[fields["syst_code11"]!!],
            systCode12 = parts[fields["syst_code12"]!!],
            systCode13 = parts[fields["syst_code13"]!!],
            systCode14 = parts[fields["syst_code14"]!!],
            systPrepost1 = parts[fields["syst_prepost1"]!!].toInt(),
            systPrepost2 = parts[fields["syst_prepost2"]!!].toInt(),
            systPrepost3 = parts[fields["syst_prepost3"]!!].toInt(),
            systPrepost4 = parts[fields["syst_prepost4"]!!].toInt(),
            systPrepost5 = parts[fields["syst_prepost5"]!!].toInt(),
            systPrepost6 = parts[fields["syst_prepost6"]!!].toInt(),
            systPrepost7 = parts[fields["syst_prepost7"]!!].toInt(),
            systPrepost8 = parts[fields["syst_prepost8"]!!].toInt(),
            systPrepost9 = parts[fields["syst_prepost9"]!!].toInt(),
            systPrepost10 = parts[fields["syst_prepost10"]!!].toInt(),
            systPrepost11 = parts[fields["syst_prepost11"]!!].toInt(),
            systPrepost12 = parts[fields["syst_prepost12"]!!].toInt(),
            systPrepost13 = parts[fields["syst_prepost13"]!!].toInt(),
            systPrepost14 = parts[fields["syst_prepost14"]!!].toInt(),
            systSchemanum1 = parts[fields["syst_schemanum1"]!!].toInt(),
            systSchemanum2 = parts[fields["syst_schemanum2"]!!].toInt(),
            systSchemanum3 = parts[fields["syst_schemanum3"]!!].toInt(),
            systSchemanum4 = parts[fields["syst_schemanum4"]!!].toInt(),
            systSchemanum5 = parts[fields["syst_schemanum5"]!!].toInt(),
            systSchemanum6 = parts[fields["syst_schemanum6"]!!].toInt(),
            systSchemanum7 = parts[fields["syst_schemanum7"]!!].toInt(),
            systSchemanum8 = parts[fields["syst_schemanum8"]!!].toInt(),
            systSchemanum9 = parts[fields["syst_schemanum9"]!!].toInt(),
            systSchemanum10 = parts[fields["syst_schemanum10"]!!].toInt(),
            systSchemanum11 = parts[fields["syst_schemanum11"]!!].toInt(),
            systSchemanum12 = parts[fields["syst_schemanum12"]!!].toInt(),
            systSchemanum13 = parts[fields["syst_schemanum13"]!!].toInt(),
            systSchemanum14 = parts[fields["syst_schemanum14"]!!].toInt(),
            systKuren1 = parts[fields["syst_kuren1"]!!].toInt(),
            systKuren2 = parts[fields["syst_kuren2"]!!].toInt(),
            systKuren3 = parts[fields["syst_kuren3"]!!].toInt(),
            systKuren4 = parts[fields["syst_kuren4"]!!].toInt(),
            systKuren5 = parts[fields["syst_kuren5"]!!].toInt(),
            systKuren6 = parts[fields["syst_kuren6"]!!].toInt(),
            systKuren7 = parts[fields["syst_kuren7"]!!].toInt(),
            systKuren8 = parts[fields["syst_kuren8"]!!].toInt(),
            systKuren9 = parts[fields["syst_kuren9"]!!].toInt(),
            systKuren10 = parts[fields["syst_kuren10"]!!].toInt(),
            systKuren11 = parts[fields["syst_kuren11"]!!].toInt(),
            systKuren12 = parts[fields["syst_kuren12"]!!].toInt(),
            systKuren13 = parts[fields["syst_kuren13"]!!].toInt(),
            systKuren14 = parts[fields["syst_kuren14"]!!].toInt(),
            systStartInt1 = parts[fields["syst_start_int1"]!!].toInt(),
            systStartInt2 = parts[fields["syst_start_int2"]!!].toInt(),
            systStartInt3 = parts[fields["syst_start_int3"]!!].toInt(),
            systStartInt4 = parts[fields["syst_start_int4"]!!].toInt(),
            systStartInt5 = parts[fields["syst_start_int5"]!!].toInt(),
            systStartInt6 = parts[fields["syst_start_int6"]!!].toInt(),
            systStartInt7 = parts[fields["syst_start_int7"]!!].toInt(),
            systStartInt8 = parts[fields["syst_start_int8"]!!].toInt(),
            systStartInt9 = parts[fields["syst_start_int9"]!!].toInt(),
            systStartInt10 = parts[fields["syst_start_int10"]!!].toInt(),
            systStartInt11 = parts[fields["syst_start_int11"]!!].toInt(),
            systStartInt12 = parts[fields["syst_start_int12"]!!].toInt(),
            systStartInt13 = parts[fields["syst_start_int13"]!!].toInt(),
            systStartInt14 = parts[fields["syst_start_int14"]!!].toInt(),
            systStopInt1 = parts[fields["syst_stop_int1"]!!].toInt(),
            systStopInt2 = parts[fields["syst_stop_int2"]!!].toInt(),
            systStopInt3 = parts[fields["syst_stop_int3"]!!].toInt(),
            systStopInt4 = parts[fields["syst_stop_int4"]!!].toInt(),
            systStopInt5 = parts[fields["syst_stop_int5"]!!].toInt(),
            systStopInt6 = parts[fields["syst_stop_int6"]!!].toInt(),
            systStopInt7 = parts[fields["syst_stop_int7"]!!].toInt(),
            systStopInt8 = parts[fields["syst_stop_int8"]!!].toInt(),
            systStopInt9 = parts[fields["syst_stop_int9"]!!].toInt(),
            systStopInt10 = parts[fields["syst_stop_int10"]!!].toInt(),
            systStopInt11 = parts[fields["syst_stop_int11"]!!].toInt(),
            systStopInt12 = parts[fields["syst_stop_int12"]!!].toInt(),
            systStopInt13 = parts[fields["syst_stop_int13"]!!].toInt(),
            systStopInt14 = parts[fields["syst_stop_int14"]!!].toInt()
        )

        val respons = NCRTreatmentResponse(
            responsUitslag = parts[fields["respons_uitslag"]!!],
            responsInt = parts[fields["respons_int"]!!].toInt(),
            pfsEvent1 = parts[fields["pfs_event1"]!!].toInt(),
            pfsEvent2 = parts[fields["pfs_event2"]!!].toInt(),
            pfsEvent3 = parts[fields["pfs_event3"]!!].toInt(),
            pfsEvent4 = parts[fields["pfs_event4"]!!].toInt(),
            fupEventType1 = parts[fields["fup_event_type1"]!!].toInt(),
            fupEventType2 = parts[fields["fup_event_type2"]!!].toInt(),
            fupEventType3 = parts[fields["fup_event_type3"]!!].toInt(),
            fupEventType4 = parts[fields["fup_event_type4"]!!].toInt(),
            pfsInt1 = parts[fields["pfs_int1"]!!].toInt(),
            pfsInt2 = parts[fields["pfs_int2"]!!].toInt(),
            pfsInt3 = parts[fields["pfs_int3"]!!].toInt(),
            pfsInt4 = parts[fields["pfs_int4"]!!].toInt()
        )

        return NCRRecord(
            keyNkr = extractor.mandatoryInt("key_nkr"),
            keyZid = extractor.mandatoryInt("key_zid"),
            keyEid = extractor.mandatoryInt("key_eid"),
            epis = extractor.mandatoryString("epis"),
            metaEpis = extractor.mandatoryInt("meta_epis"),
            teller = extractor.mandatoryInt("teller"),
            gesl = extractor.mandatoryInt("gesl"),
            leeft = extractor.mandatoryInt("leeft"),
            vitStat = extractor.mandatoryInt("vit_stat"),
            vitStatInt = extractor.mandatoryInt("vit_stat_int"),
            perfStat = extractor.mandatoryInt("perf_stat"),
            asa = extractor.mandatoryInt("asa"),
            cci,
            mal,
            incjr = parts[fields["incjr"]!!].toInt(),
            topoSublok = parts[fields["topo_sublok"]!!],
            morfCat = parts[fields["morf_cat"]!!].toInt(),
            diagBasis = parts[fields["diag_basis"]!!].toInt(),
            diffgrad = parts[fields["diffgrad"]!!],
            ct = parts[fields["ct"]!!],
            cn = parts[fields["cn"]!!],
            cm = parts[fields["cm"]!!],
            pt = parts[fields["pt"]!!],
            pn = parts[fields["pn"]!!],
            pm = parts[fields["pm"]!!],
            cstadium = parts[fields["cstadium"]!!],
            pstadium = parts[fields["pstadium"]!!],
            stadium = parts[fields["stadium"]!!],
            ondLymf = parts[fields["ond_lymf"]!!].toInt(),
            posLymf = parts[fields["pos_lymf"]!!].toInt(),
            meta,
            dubbeltum = parts[fields["dubbeltum"]!!].toInt(),
            ileus = parts[fields["ileus"]!!].toInt(),
            perforatie = extractor.optionalInt("perforatie"),
            anusAfst = extractor.optionalInt("anus_afst"),
            mrfAfst = extractor.optionalInt("mrf_afst"),
            veneusInvas = extractor.optionalInt("veneus_invas"),
            lymfInvas = extractor.optionalInt("lymf_invas"),
            emi = extractor.optionalInt("emi"),
            tumregres = extractor.optionalInt("tumregres"),
            msiStat = parts[fields["msi_stat"]!!].toInt(),
            brafMut = parts[fields["braf_mut"]!!].toInt(),
            rasMut = parts[fields["ras_mut"]!!].toInt(),
            lab,
            deelnameStudie = parts[fields["deelname_studie"]!!].toInt(),
            tumgerichtTher = parts[fields["tumgericht_ther"]!!].toInt(),
            geenTherReden = parts[fields["geen_ther_reden"]!!].toInt(),
            mdlRes = parts[fields["mdl_res"]!!].toInt(),
            mdlResType1 = parts[fields["mdl_res_type1"]!!].toInt(),
            mdlResType2 = parts[fields["mdl_res_type2"]!!].toInt(),
            mdlResInt1 = parts[fields["mdl_res_int1"]!!].toInt(),
            mdlResInt2 = parts[fields["mdl_res_int2"]!!].toInt(),
            chir,
            chemort = parts[fields["chemort"]!!].toInt(),
            rt,
            metaRtCode1 = parts[fields["meta_rt_code1"]!!],
            metaRtCode2 = parts[fields["meta_rt_code2"]!!],
            metaRtCode3 = parts[fields["meta_rt_code3"]!!],
            metaRtCode4 = parts[fields["meta_rt_code4"]!!],
            metaRtStartInt1 = parts[fields["meta_rt_start_int1"]!!],
            metaRtStartInt2 = parts[fields["meta_rt_start_int2"]!!],
            metaRtStartInt3 = parts[fields["meta_rt_start_int3"]!!],
            metaRtStartInt4 = parts[fields["meta_rt_start_int4"]!!],
            metaRtStopInt1 = parts[fields["meta_rt_stop_int1"]!!],
            metaRtStopInt2 = parts[fields["meta_rt_stop_int2"]!!],
            metaRtStopInt3 = parts[fields["meta_rt_stop_int3"]!!],
            metaRtStopInt4 = parts[fields["meta_rt_stop_int4"]!!],
            metaChirCode1 = parts[fields["meta_chir_code1"]!!],
            metaChirCode2 = parts[fields["meta_chir_code2"]!!],
            metaChirCode3 = parts[fields["meta_chir_code3"]!!],
            metaChirInt1 = parts[fields["meta_chir_int1"]!!].toInt(),
            metaChirInt2 = parts[fields["meta_chir_int2"]!!].toInt(),
            metaChirInt3 = parts[fields["meta_chir_int3"]!!].toInt(),
            metaChirRad1 = parts[fields["meta_chir_rad1"]!!].toInt(),
            metaChirRad2 = parts[fields["meta_chir_rad2"]!!].toInt(),
            metaChirRad3 = parts[fields["meta_chir_rad3"]!!].toInt(),
            syst,
            hipec = parts[fields["hipec"]!!].toInt(),
            hipecInt1 = parts[fields["hipec_int1"]!!].toInt(),
            respons
        )
    }

    private fun createFields(header: Array<String>): Map<String, Int> {
        val fields: MutableMap<String, Int> = HashMap()
        for ((i) in header.withIndex()) {
            fields[header[i]] = i
        }
        return fields
    }
}